/* eslint-env node */
'use strict';
const { createMacro } = require( 'babel-macros' );
const inject = require( './macros/inject' );
const ref = require( './macros/ref' );

const refState = {
    map: new Map()
};

module.exports = createMacro( macro, {
    configName: 'ref'
} );

function macro( { references, config } ) {
    if ( references.inject ) {
        references.inject.forEach( referencePath => {
            inject( referencePath.findParent( x => x.isDecorator() ) );
        } );
    }

    if ( references.ref ) {
        const { enabled = false } = config;
        if ( enabled ) {
            references.ref.forEach( referencePath => {
                ref(
                    referencePath.findParent( x => x.isCallExpression() ),
                    config,
                    refState
                )
            } );
        } else {

            // Don't enable ref for libs
            if ( references.inject ) {

                // Remove `inject` import
                references.inject[ 0 ]
                    .findParent( path => path.isProgram() )
                    .get( 'body' )
                    .filter( path => path.isImportDeclaration() )
                    .forEach(
                        path => path.get( 'specifiers' )
                            .filter(
                                p => (
                                    p.isImportSpecifier() &&
                                    'inject' === p.get( 'imported' ).node.name
                                )
                            )
                            .forEach( p => p.remove() )
                    )
                ;
            }

            // Keep imports for process in app level
            return {
                keepImports: true
            }
        }
    }
}
